import serial
import time
import cv2
import threading
from ultralytics import YOLO

# Initialize Serial Communication with Arduino
arduino = serial.Serial('/dev/ttyACM0', 9600, timeout=1)  # Adjust port if needed

# Load YOLOv8 model
model = YOLO("/home/pi/my_project/models/best.pt")  # Adjust path if needed

# Open USB camera
cap = cv2.VideoCapture(0)

if not cap.isOpened():
    print("Error: Could not open camera.")
    exit()

# Set camera properties (FPS and resolution)
cap.set(cv2.CAP_PROP_FPS, 30)
cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)

# Initialize a flag to control processing
frame_ready = False
frame = None

# Function to capture frames from the camera
def capture_frame():
    global frame, frame_ready
    while True:
        ret, captured_frame = cap.read()
        if ret:
            frame = captured_frame
            frame_ready = True

# Function to perform object detection and control the rover
def detect_objects():
    global frame_ready, frame
    frame_counter = 0
    while True:
        if frame_ready:
            # Perform object detection every 5th frame
            frame_counter += 1
            if frame_counter % 5 == 0:
                frame_resized = cv2.resize(frame, (640, 480))  # Resize for faster processing
                results = model(frame_resized)

                detected = False
                max_confidence = 0.0
                for result in results:
                    for box in result.boxes:
                        confidence = box.conf.item()
                        if confidence > 0.70:  # Confidence threshold
                            detected = True
                            max_confidence = confidence
                            break
                    if detected:
                        break

                if detected:
                    print(f"Detected successfully with confidence: {max_confidence:.2f}")
                    arduino.write(b"DETECTED\n")  # Send stop command to Arduino
                
                else:
                    print("No detection")
                    arduino.write(b"FORWARD\n")  # Send forward command
                
                frame_ready = False  # Reset frame flag

# Start threads for frame capture and object detection
capture_thread = threading.Thread(target=capture_frame)
detection_thread = threading.Thread(target=detect_objects)

capture_thread.start()
detection_thread.start()

while True:
    # Press 'q' to quit
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Cleanup
capture_thread.join()
detection_thread.join()
cap.release()
cv2.destroyAllWindows()
arduino.close()

#include <Servo.h>

// Motor Driver Pins
#define IN1 6
#define IN2 7
#define IN3 8
#define IN4 9

// Servo Pins
#define FRONT_RIGHT_SERVO 10
#define FRONT_LEFT_SERVO 11
#define CAMERA_SERVO 12

// Servo Objects
Servo frontRightServo;
Servo frontLeftServo;
Servo cameraServo;

// Camera servo parameters
int cameraAngle = 120;  // Start from 120°
bool increasing = true; // Sweep direction
bool stopServo = false; // Flag to stop servo when object is detected
bool stopRover = false; // Flag to stop the rover when object is detected

void setup() {
    Serial.begin(9600);  // Start Serial Communication

    // Set motor driver pins as outputs
    pinMode(IN1, OUTPUT);
    pinMode(IN2, OUTPUT);
    pinMode(IN3, OUTPUT);
    pinMode(IN4, OUTPUT);

    // Attach servos and set initial position
    frontRightServo.attach(FRONT_RIGHT_SERVO);
    frontLeftServo.attach(FRONT_LEFT_SERVO);
    cameraServo.attach(CAMERA_SERVO);

    frontRightServo.write(80);
    frontLeftServo.write(80);
    cameraServo.write(cameraAngle);
}

void loop() {
    if (Serial.available() > 0) {
        String command = Serial.readStringUntil('\n');

        if (command == "FORWARD") {
            moveForward();
            stopServo = false;  // Resume camera scanning
            stopRover = false;  // Resume movement
        } 
        else if (command == "DETECTED") {
            stopMotors();
            stopServo = true; // Stop camera servo at current position
            stopRover = true; // Stop the rover
        } 
    }

    // Camera servo sweeps from 120° to 160° if not stopped
    if (!stopServo) {
        if (increasing) {
            cameraAngle++;
            if (cameraAngle >= 160) increasing = false;
        } else {
            cameraAngle--;
            if (cameraAngle <= 120) increasing = true;
        }
        cameraServo.write(cameraAngle);
        delay(50); // Smooth movement
    }
}

void moveForward() {
    if (!stopRover) { // Only move if not stopped
        digitalWrite(IN1, HIGH);
        digitalWrite(IN2, LOW);
        digitalWrite(IN3, HIGH);
        digitalWrite(IN4, LOW);
        Serial.println("Moving Forward");
    }
}

void stopMotors() {
    digitalWrite(IN1, LOW);
    digitalWrite(IN2, LOW);
    digitalWrite(IN3, LOW);
    digitalWrite(IN4, LOW);
    Serial.println("Stopping Rover");
}

